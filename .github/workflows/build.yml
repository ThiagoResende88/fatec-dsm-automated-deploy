name: CI/CD Completo - Flask, SonarQube e Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # -----------------------------------------------------------------
  # JOB 1: Build da imagem Docker e Push para o Docker Hub
  # -----------------------------------------------------------------
  build-and-push:
    name: 1. Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: thiagoresende/app-flask-fatec:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # -----------------------------------------------------------------
  # JOB 2: Análise de Qualidade com SonarQube no Servidor Remoto
  # -----------------------------------------------------------------
  analyze-with-sonarqube:
    name: 2. Análise de Código com SonarQube
    runs-on: ubuntu-latest
    needs: build-and-push # Depende do sucesso do job anterior

    steps:
      - name: Checkout do código (com histórico completo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Java (necessário para o SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download e Configuração do SonarScanner
        run: |
          mkdir -p $HOME/.sonar
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -O $HOME/.sonar/sonar-scanner.zip
          unzip -q $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Executar Análise SonarQube
        env:
          # --- Usando uma porta do seu range (8218-8223) para o SonarQube ---
          SONAR_HOST_URL: http://${{ secrets.SSH_HOST }}:8220
          SONAR_LOGIN: admin
          SONAR_PASSWORD: admin
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "---- Iniciando SonarQube Container (Porta 8220) ----"
            docker stop sonarqube_temp || true
            docker rm sonarqube_temp || true
            
            # Mapeia a porta 8220 do servidor para a porta 9000 do container
            docker run -d --name sonarqube_temp -p 8220:9000 sonarqube:community
            
            echo "---- Aguardando SonarQube iniciar (pode levar até 5 min) ----"
            timeout=300
            interval=15
            elapsed=0
            until $(curl --output /dev/null --silent --head --fail $SONAR_HOST_URL/api/system/status); do
              if [ $elapsed -ge $timeout ]; then
                echo "Timeout: SonarQube não iniciou em $timeout segundos."
                docker logs sonarqube_temp
                docker stop sonarqube_temp && docker rm sonarqube_temp
                exit 1
              fi
              printf '.'
              sleep $interval
              elapsed=$(($elapsed + $interval))
            done
            echo "SonarQube iniciado e pronto!"

            echo "---- Executando SonarScanner ----"
            sonar-scanner \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_LOGIN \
              -Dsonar.password=$SONAR_PASSWORD
            
            ANALYSIS_STATUS_URL="$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=fatec-dsm-flask-app"
            echo "---- Verificando Quality Gate do SonarQube ----"
            sleep 20 

            timeout_analysis=120
            elapsed_analysis=0
            quality_gate_status="NONE"
            
            while [ "$quality_gate_status" != "OK" ] && [ $elapsed_analysis -lt $timeout_analysis ]; do
              response=$(curl -s -u $SONAR_LOGIN:$SONAR_PASSWORD $ANALYSIS_STATUS_URL)
              echo "Resposta da API do Quality Gate: $response"
              if echo "$response" | grep -q '"status":"OK"'; then
                quality_gate_status="OK"
              elif echo "$response" | grep -q '"status":"ERROR"'; then
                quality_gate_status="ERROR"
                break
              elif echo "$response" | grep -q '"status":"WARN"'; then
                quality_gate_status="WARN"
                break
              fi
              echo "Status atual do Quality Gate: $quality_gate_status (aguardando...)"
              sleep $interval
              elapsed_analysis=$(($elapsed_analysis + $interval))
            done

            echo "---- Finalizando e Removendo SonarQube Container ----"
            docker stop sonarqube_temp
            docker rm sonarqube_temp

            if [ "$quality_gate_status" = "OK" ]; then
              echo "✅ Quality Gate APROVADO!"
              exit 0
            else
              echo "❌ Quality Gate REPROVADO ou Timeout! Status: $quality_gate_status"
              exit 1
            fi

  # -----------------------------------------------------------------
  # JOB 3: Deploy da Aplicação no Servidor Remoto
  # -----------------------------------------------------------------
  deploy-to-server:
    name: 3. Deploy no Servidor Remoto
    runs-on: ubuntu-latest
    needs: analyze-with-sonarqube # Depende do sucesso da análise do SonarQube

    steps:
      - name: Checkout do código (para ter acesso ao docker-compose.yml)
        uses: actions/checkout@v4

      - name: Copiar arquivos de deploy para o servidor
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml,init.sql" 
          target: "/home/aluno/app-flask-crud"   
          
      - name: Executar Deploy com Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/aluno/app-flask-crud
            echo "---- Fazendo pull da imagem mais recente do Docker Hub ----"
            docker compose pull
            echo "---- Subindo os containers com a nova imagem ----"
            docker compose up -d --remove-orphans
            echo "---- Deploy concluído! Verificando containers... ----"
            docker ps

