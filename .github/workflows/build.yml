name: CI/CD Completo - Flask, SonarCloud e Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # -----------------------------------------------------------------
  # JOB 1: Build da imagem Docker e Push para o Docker Hub
  # -----------------------------------------------------------------
  build-and-push:
    name: 1. Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: thiagoresende/app-flask-fatec:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # -----------------------------------------------------------------
  # JOB 2: Análise de Qualidade com SonarCloud
  # -----------------------------------------------------------------
  sonarcloud-analysis:
    name: 2. Análise de Código com SonarCloud
    runs-on: ubuntu-latest
    needs: build-and-push 
    steps:
      - name: Checkout do código (com histórico completo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  # -----------------------------------------------------------------
  # JOB 3: Deploy da Aplicação no Servidor Remoto
  # -----------------------------------------------------------------
  deploy-to-server:
    name: 3. Deploy no Servidor Remoto
    runs-on: ubuntu-latest
    needs: sonarcloud-analysis 

    steps:
      - name: Checkout do código (para ter acesso ao docker-compose.yml)
        uses: actions/checkout@v4

      - name: Garantir que o diretório de deploy existe
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: 'mkdir -p /home/aluno/app-flask-crud'

      - name: Copiar docker-compose.yml para o servidor
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/aluno/app-flask-crud"
          
      - name: Executar Deploy com Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navega para o diretório da aplicação no servidor
            cd /home/aluno/app-flask-crud
            
            echo "---- Fazendo pull da imagem mais recente do Docker Hub ----"
            docker compose pull
            
            echo "---- Subindo os containers com a nova imagem ----"
            docker compose up -d --remove-orphans
            
            echo "---- Deploy concluído! Verificando containers... ----"
            sleep 15
            
            # ----- INÍCIO DA SEÇÃO DE DIAGNÓSTICO -----
            echo "==== INICIANDO DIAGNÓSTICO NO SERVIDOR ===="
          
            echo "PASSO 1: Verificando containers em execução (docker ps)"
            docker ps

            echo "----------------------------------------------------"
          
            echo "PASSO 2: Verificando logs do container da aplicação (flask_app_container)"
            # 'flask_app_container' é o nome que definimos no nosso docker-compose.yml
            docker logs flask_app_container
  
            echo "----------------------------------------------------"

            echo "PASSO 3: Testando conexão localmente no servidor (curl)"
            # Tenta acessar a aplicação de dentro do próprio servidor para testar se a porta está aberta localmente
            # O '-I' pega apenas os cabeçalhos da resposta. Se funcionar, veremos 'HTTP/1.1 200 OK'.
            curl -I http://localhost:8218

            echo "==== FIM DO DIAGNÓSTICO ===="
 
