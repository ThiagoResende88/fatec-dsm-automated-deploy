# .github/workflows/deploy.yml

name: CI/CD Deploy Automatizado Fatec

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push-docker-image:
    name: Build e Push Imagem Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: thiagoresende88/app-flask-fatec:latest # Verifique se este é o seu repo correto
          cache-from: type=gha
          cache-to: type=gha,mode=max

  analyze-with-sonarqube:
    name: Análise de Código com SonarQube
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image # Este job depende do anterior

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para análise precisa do SonarQube (histórico completo)

      - name: Configurar Java (SonarScanner precisa de Java)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Ou 'zulu', 'adopt'
          java-version: '17'     # SonarScanner geralmente requer Java 11 ou 17

      - name: Download e Configuração do SonarScanner
        run: |
          mkdir -p $HOME/.sonar
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -O $HOME/.sonar/sonar-scanner.zip
          unzip -q $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH
        # Verifique a versão mais recente do SonarScanner se desejar

      - name: Executar Análise SonarQube no Servidor Remoto
        env:
          SONAR_HOST_URL: http://${{ secrets.SSH_HOST }}:9000 # Porta padrão do SonarQube
          SONAR_LOGIN: admin # Usuário padrão do SonarQube
          SONAR_PASSWORD: admin # Senha padrão do SonarQube (para a imagem Docker padrão)
          # Ou use um token: SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_SECRET }}
          # E no sonar-project.properties, use sonar.login=${SONAR_TOKEN}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "---- Iniciando SonarQube Container no Servidor Remoto ----"
            # Parar e remover container SonarQube antigo, se existir (para garantir um início limpo)
            docker stop sonarqube_temp || true
            docker rm sonarqube_temp || true
            # Iniciar SonarQube em modo detached
            docker run -d --name sonarqube_temp -p 9000:9000 sonarqube:community
            
            echo "---- Aguardando SonarQube iniciar (pode levar alguns minutos) ----"
            # Loop simples para aguardar o SonarQube ficar pronto (timeout após 5 minutos)
            timeout=300 # 5 minutos
            interval=10 # 10 segundos
            elapsed=0
            until $(curl --output /dev/null --silent --head --fail $SONAR_HOST_URL/api/system/status); do
              if [ $elapsed -ge $timeout ]; then
                echo "Timeout: SonarQube não iniciou em $timeout segundos."
                docker logs sonarqube_temp # Mostrar logs para debug
                docker stop sonarqube_temp && docker rm sonarqube_temp
                exit 1
              fi
              printf '.'
              sleep $interval
              elapsed=$(($elapsed + $interval))
            done
            echo "SonarQube iniciado e pronto!"

            echo "---- Executando SonarScanner a partir da máquina do GitHub Actions ----"
            # O SonarScanner rodará na máquina do GitHub Actions, mas apontará para o SonarQube no servidor remoto.
            # O código fonte já está na máquina do GitHub Actions devido ao checkout.
            sonar-scanner \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_LOGIN \
              -Dsonar.password=$SONAR_PASSWORD 
              # Se usar token: -Dsonar.login=$SONAR_TOKEN
              # Adicione -Dsonar.projectKey, -Dsonar.sources se não estiverem no sonar-project.properties
            
            ANALYSIS_STATUS_URL="$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=fatec-dsm-flask-app" # Use seu projectKey
            echo "---- Verificando Quality Gate do SonarQube (URL: $ANALYSIS_STATUS_URL) ----"
            # Loop para aguardar o resultado da análise (timeout após 2 minutos)
            timeout_analysis=120
            elapsed_analysis=0
            quality_gate_status="NONE" # Inicializa com um valor que não seja "OK"
            
            sleep 20 # Dá um tempo para a análise ser processada no SonarQube

            while [ "$quality_gate_status" != "OK" ] && [ $elapsed_analysis -lt $timeout_analysis ]; do
              # Tenta obter o status. O jq é útil para parsear JSON, mas vamos tentar com grep por simplicidade
              # Se tiver jq instalado no runner:
              # quality_gate_status=$(curl -s -u $SONAR_LOGIN:$SONAR_PASSWORD $ANALYSIS_STATUS_URL | jq -r '.projectStatus.status')
              # Sem jq, uma forma mais simples (pode precisar de ajuste):
              response=$(curl -s -u $SONAR_LOGIN:$SONAR_PASSWORD $ANALYSIS_STATUS_URL)
              echo "Resposta da API do Quality Gate: $response" # Para debug
              if echo "$response" | grep -q '"status":"OK"'; then
                quality_gate_status="OK"
              elif echo "$response" | grep -q '"status":"ERROR"'; then
                quality_gate_status="ERROR"
                break # Sai do loop se for ERROR
              elif echo "$response" | grep -q '"status":"WARN"'; then
                quality_gate_status="WARN" # Pode ser aceitável dependendo do seu Quality Gate
                # Para este exemplo, vamos considerar WARN como falha para ser mais rigoroso
                # quality_gate_status="OK" # Se WARN for aceitável
                break 
              fi
              echo "Status atual do Quality Gate: $quality_gate_status (aguardando... $elapsed_analysis s)"
              sleep $interval
              elapsed_analysis=$(($elapsed_analysis + $interval))
            done

            echo "---- Finalizando e Removendo SonarQube Container ----"
            docker stop sonarqube_temp
            docker rm sonarqube_temp
            echo "SonarQube container parado e removido."

            if [ "$quality_gate_status" = "OK" ]; then
              echo "Quality Gate APROVADO!"
              exit 0
            else
              echo "Quality Gate REPROVADO ou Timeout! Status: $quality_gate_status"
              exit 1 # Falha o job
            fi
